type TxIndex = nat;
type TransferTokenLockOwnershipResult = 
 variant {
   Err: TransferTokenLockOwnershipError;
   Ok;
 };
type TransferTokenLockOwnershipError = 
 record {
   message: text;
   transfer_error: opt TransferError;
 };
type TransferResult = 
 variant {
   Err: TransferError;
   Ok: TxIndex;
 };
type TransferPositionResult = 
 variant {
   err: TransferPositionError;
   ok: bool;
 };
type TransferPositionOwnershipResult = 
 variant {
   Err: TransferPositionOwnershipError;
   Ok;
 };
type TransferPositionOwnershipError = record {message: text;};
type TransferPositionError = 
 variant {
   CommonError;
   InsufficientFunds;
   InternalError: text;
   UnsupportedToken: text;
 };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: Balance;};
   BadFee: record {expected_fee: Balance;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: TxIndex;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: Balance;};
   TemporarilyUnavailable;
   TooOld;
 };
type TokenType = principal;
type Timestamp = nat64;
type SwapCanisterId = principal;
type Subaccount = blob;
type SneedLock = 
 service {
   admin_add_admin: (new_admin: principal) -> (variant {
                                                 Err: text;
                                                 Ok: text;
                                               });
   admin_clear_completed_claim_requests: () -> (nat);
   admin_clear_failed_claim_requests: () -> (nat);
   admin_emergency_stop_timer: () -> ();
   admin_pause_claim_queue: (reason: text) -> ();
   admin_remove_active_claim_request: (request_id: ClaimRequestId) -> (bool);
   admin_remove_admin: (admin_to_remove: principal) ->
    (variant {
       Err: text;
       Ok: text;
     });
   admin_rescue_stuck_tokens: (token_ledger: TokenType, recipient:
    principal) -> (variant {
                     Err: text;
                     Ok: text;
                   });
   admin_resume_claim_queue: () -> ();
   admin_retry_claim_request: (request_id: ClaimRequestId) ->
    (variant {
       Err: text;
       Ok: text;
     });
   admin_return_token: (icrc1_ledger_canister_id: principal, amount: 
    nat, user_principal: principal) -> (TransferResult);
   admin_return_token_from_failed_request: (icrc1_ledger_canister_id:
    principal, amount: nat, recipient_principal: principal) ->
    (TransferResult);
   admin_set_enforce_zero_balance_before_claim: (enforce: bool) -> ();
   admin_trigger_claim_processing: () -> (text);
   claim_position: (swap_canister_id: principal, position_id: PositionId) ->
    (bool);
   clear_expired_locks: () -> ();
   clear_expired_position_locks: () -> ();
   create_lock: (amount: nat, icrc1_ledger_canister_id: principal,
    expires_at: Expiry) -> (CreateLockResult);
   create_position_lock: (swap_canister_id: principal, dex: Dex, position_id:
    PositionId, expires_at: Expiry, token0: TokenType, token1: TokenType) ->
    (CreateLockResult);
   get_active_claim_request: (request_id: ClaimRequestId) ->
    (opt ClaimRequest) query;
   get_admin_list: () -> (vec principal) query;
   get_all_active_claim_requests: () -> (vec ClaimRequest) query;
   get_all_completed_claim_requests: () -> (vec ClaimRequest) query;
   get_all_failed_claim_requests: () -> (vec ClaimRequest) query;
   get_all_position_locks: () -> (vec FullyQualifiedPositionLock) query;
   get_all_token_locks: () -> (vec FullyQualifiedLock) query;
   get_claim_queue_status: () ->
    (record {
       active_total: nat;
       completed_count: nat;
       consecutive_empty_cycles: nat;
       failed_count: nat;
       is_currently_processing: bool;
       pending_count: nat;
       processing_count: nat;
       processing_state: QueueProcessingState;
     }) query;
   get_claim_request_status: (request_id: ClaimRequestId) ->
    (opt
      variant {
        Active: ClaimRequest;
        Completed: ClaimRequest;
        Failed: ClaimRequest;
      }) query;
   get_claimed_positions_for_principal: (owner: principal) ->
    (vec ClaimedPosition) query;
   get_completed_claim_request: (request_id: ClaimRequestId) ->
    (opt ClaimRequest) query;
   get_enforce_zero_balance_before_claim: () -> (bool) query;
   get_error_entries: (start: nat, length: nat) -> (vec opt BufferEntry);
   get_error_id_range: () -> (opt record {
                                    nat;
                                    nat;
                                  });
   get_failed_claim_request: (request_id: ClaimRequestId) ->
    (opt ClaimRequest) query;
   get_info_entries: (start: nat, length: nat) -> (vec opt BufferEntry);
   get_info_id_range: () -> (opt record {
                                   nat;
                                   nat;
                                 });
   get_ledger_token_locks: (ledger_canister_id: TokenType) ->
    (vec FullyQualifiedLock) query;
   get_my_active_claim_requests: () -> (vec ClaimRequest) query;
   get_position_ownerships: () ->
    (vec record {
           SwapCanisterId;
           PositionId;
         }) query;
   get_summed_locks: () -> (vec record {
                                  TokenType;
                                  Balance;
                                }) query;
   get_swap_position_locks: (swap_canister_id: SwapCanisterId) ->
    (vec FullyQualifiedPositionLock) query;
   get_timer_status: () ->
    (record {
       is_active: bool;
       last_execution_correlation_id: opt nat;
       last_execution_time: opt Timestamp;
       next_scheduled_time: opt Timestamp;
       time_since_last_execution_seconds: opt nat64;
       timer_id: opt nat;
     }) query;
   get_token_lock_fee_sneed_e8s: () -> (nat) query;
   get_token_locks: () ->
    (vec record {
           LockId;
           TokenType;
           Balance;
           Expiry;
         }) query;
   get_token_position_locks: (token_canister_id: TokenType) ->
    (vec FullyQualifiedPositionLock) query;
   has_expired_locks: () -> (bool) query;
   has_expired_position_locks: () -> (bool) query;
   request_claim_and_withdraw: (swap_canister_id: SwapCanisterId,
    position_id: PositionId) -> (ClaimAndWithdrawResult);
   set_max_lock_length_days: (new_max_lock_length_days: nat64) -> ();
   set_token_lock_fee_sneed_e8s: (new_token_lock_fee_sneed_e8s: nat) ->
    (SetLockFeeResult);
   transfer_position: (to: principal, swap_canister_id: principal,
    position_id: PositionId) -> (TransferPositionResult);
   transfer_position_ownership: (to_principal: principal, swap_canister_id:
    SwapCanisterId, position_id: PositionId) ->
    (TransferPositionOwnershipResult);
   transfer_token_lock_ownership: (to_principal: principal, token_type:
    TokenType, lock_id: LockId) -> (TransferTokenLockOwnershipResult);
   transfer_tokens: (to_principal: principal, to_subaccount: opt Subaccount,
    icrc1_ledger_canister_id: principal, amount: Balance) -> (TransferResult);
   update_position_lock: (swap_canister_id: principal, position_id:
    PositionId, expires_at: Expiry) -> (CreateLockResult);
 };
type SetLockFeeResult = 
 variant {
   Err: text;
   Ok: nat;
 };
type QueueProcessingState = 
 variant {
   Active;
   Paused: text;
 };
type PositionLock = 
 record {
   dex: Dex;
   expiry: Expiry;
   lock_id: LockId;
   position_id: PositionId;
   token0: TokenType;
   token1: TokenType;
 };
type PositionId = nat;
type LockId = nat;
type Lock = 
 record {
   amount: Balance;
   expiry: Expiry;
   lock_id: LockId;
 };
type FullyQualifiedPositionLock = 
 record {
   principal;
   SwapCanisterId;
   PositionLock;
 };
type FullyQualifiedLock = 
 record {
   principal;
   TokenType;
   Lock;
 };
type Expiry = nat64;
type Dex = nat;
type CreateLockResult = 
 variant {
   Err: CreateLockError;
   Ok: LockId;
 };
type CreateLockError = 
 record {
   message: text;
   transfer_error: opt TransferError;
 };
type ClaimedPosition = 
 record {
   owner: principal;
   position_id: PositionId;
   position_lock: opt PositionLock;
   swap_canister_id: SwapCanisterId;
 };
type ClaimRequestStatus = 
 variant {
   BalanceRecorded:
    record {
      balance0_before: Balance;
      balance1_before: Balance;
    };
   ClaimAttempted:
    record {
      balance0_before: Balance;
      balance1_before: Balance;
      claim_attempt: nat;
    };
   ClaimVerified:
    record {
      amount0_claimed: Balance;
      amount1_claimed: Balance;
      balance0_before: Balance;
      balance1_before: Balance;
    };
   Completed:
    record {
      amount0_claimed: Balance;
      amount0_transferred: Balance;
      amount1_claimed: Balance;
      amount1_transferred: Balance;
      transfer0_tx_id: opt nat;
      transfer1_tx_id: opt nat;
    };
   Failed: text;
   Pending;
   Processing;
   TimedOut;
   Withdrawn: record {
                amount0_claimed: Balance;
                amount1_claimed: Balance;
              };
 };
type ClaimRequestId = nat;
type ClaimRequest = 
 record {
   caller: principal;
   completed_at: opt Timestamp;
   created_at: Timestamp;
   last_attempted_at: opt Timestamp;
   position_id: PositionId;
   request_id: ClaimRequestId;
   retry_count: nat;
   started_processing_at: opt Timestamp;
   status: ClaimRequestStatus;
   swap_canister_id: SwapCanisterId;
   token0: TokenType;
   token1: TokenType;
 };
type ClaimAndWithdrawResult = 
 variant {
   Err: text;
   Ok: ClaimRequestId;
 };
type BufferEntry = 
 record {
   caller: principal;
   content: text;
   correlation_id: nat;
   id: nat;
   timestamp: int;
 };
type Balance = nat;
service : () -> SneedLock
